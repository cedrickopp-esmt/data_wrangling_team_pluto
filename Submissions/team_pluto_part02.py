# -*- coding: utf-8 -*-
"""Team_pluto_part02.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kZaYOWm0SxybCiN5I5srrPNnqLv3da2M

# Group Project part 02

#### Deadline for the code submission: October 14th at 01:29 pm CET

#### Reminder
- your group is the one assigned to you by the University.
- one goal of this project is to learn how to work as a group, which is the standard in the tech industry. Therefore you need to resolve group issues on your own, as a group.
- if you did not manage to resolve the group issues on your own, you need to escalate to the teacher early, not last minute.
- if the group splits, it would result in a 0 for the whole group.

**Penalty for unexcused absence or lateness**:
- If you are absent or late on presentation day without an official excuse, you will receive 0 for the presentation part of the group project.
- If you are late without an official excuse and can still make it to the presentation of your team, you will still receive 0 for the presentation part of the group project.

## Objective
In this project, you utilise your skills to :
- collect data through multiple APIs and open source datasets, for both quantitative and qualitative data
- merge data from different sources
- describe and analyse datasets
- uncover patterns, insights
- calculate aggregated measures, statistics
- create compelling data visualisations
- write clean code
- tell a story and convince your audience

Each group can pick one and one only scenario among the following ones.

Be mindful to pick a topic that enables enough data collection and analysis in order to showcase all the skills gathered during the course, listed above.

### Scenario 01: Become a Business Manager

Your task is to design a local business that leverages data from various APIs to make informed, strategic decisions. Whether you're launching a street food stand, a drink shop, or another local venture, your team will gather and analyze relevant data —such as foot traffic, weather patterns, customer trends, or competitor insights— to shape your business plan. Your final deliverable will be a data-supported report and/or presentation to a management board, demonstrating how your findings guide key decisions in operations, marketing, or product offerings. The ultimate goal: to optimize performance and increase the chances of business success. Will your business thrive in today’s data-driven world?
Examples:
- lemonade stands business
- food truck business
- delivery service

### Scenario 02: Fact Check Popular beliefs

You are part of a fact-checking research team investigating common beliefs, trending opinions, or viral social media claims (e.g. “drinking lemon water boosts metabolism” or “blue light ruins your sleep”). Your goal is to dig into reliable sources, data, and expert opinions to determine whether these beliefs hold up under scrutiny. Use data to challenge or prove real-world claims with clear, persuasive insights. Drawing on research, statistics, and visual evidence, your team will present a well-supported explanation to help your audience separate fact from fiction.

You may also choose to divide the group into two sides—one defending the belief and the other challenging it—before presenting your findings in a debate or side-by-side analysis.

Examples:
- Electric cars are always better for the environment
- Areas with more green space have better physical and mental health outcomes.
- Does public sentiment on social media predict stock market trends?
"""

from google.colab import drive
drive.mount('/content/drive')
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""## 04 - Data cleaning and processing

In order to make data-driven decisions, you will need to clean the collected data, fill missing values, merge datasets etc.

Take some time to clean and process the collected data so that you can use it.

Organize the dataset into a structured format, such as a CSV file, HTML file, EXCEL file, and a table where each row represents the achieved data.
"""

path = '/content/drive/MyDrive/Group_Project/data'

#Make pandas Dataframe out of the collected csv files

worldb_energy_df = pd.read_csv(f"{path}/worldb_energy.csv")
worldb_envfin_df = pd.read_csv(f"{path}/worldb_envfin.csv")
worldb_envghg_df = pd.read_csv(f"{path}/worldb_envghg.csv")
environment_imf_df = pd.read_csv(f"{path}/Environment_IMF.csv")
CPI_Global_Climate_Finance_df = pd.read_csv(f"{path}/CPI_Global_Climate_Finance_Data.csv")

#Create id column for merging Worldbank Dataframes
worldb_energy_df['economy_Time'] = worldb_energy_df['economy'].astype(str) + '_' + worldb_energy_df['Time'].astype(str)

cols = ['economy_Time'] + [col for col in worldb_energy_df.columns if col != 'economy_Time']
worldb_energy_df = worldb_energy_df[cols]

worldb_energy_df.head()

worldb_envfin_df['economy_Time'] = worldb_envfin_df['economy'].astype(str) + '_' + worldb_envfin_df['Time'].astype(str)

cols = ['economy_Time'] + [col for col in worldb_envfin_df.columns if col != 'economy_Time']
worldb_envfin_df = worldb_envfin_df[cols]

worldb_envfin_df.head()

worldb_envghg_df['economy_Time'] = worldb_envghg_df['economy'].astype(str) + '_' + worldb_envghg_df['Time'].astype(str)

cols = ['economy_Time'] + [col for col in worldb_envghg_df.columns if col != 'economy_Time']
worldb_envghg_df = worldb_envghg_df[cols]

worldb_envghg_df.head()

#Merge Worldbank Dataframes
worldb_df_merge_one = pd.merge(worldb_energy_df, worldb_envfin_df, on="economy_Time", how="left")
worldb_df_merged = pd.merge(worldb_df_merge_one, worldb_envghg_df, on="economy_Time", how="inner")

worldb_df_merged.shape

#Drop duplicate columns from merge
worldb_df_final = worldb_df_merged.drop(columns=['Unnamed: 0_x','economy_x', 'time_x', 'Country_x', 'Time_x', 'economy_y', 'time_y', 'Country_y', 'Time_y', 'economy', 'time', 'Time'], axis=1)
worldb_df_final.shape

#Make gather a list of the column names abbrevations
column_names = worldb_df_final.columns.tolist()
print(column_names)

#Change the abbrevations into English
worldb_df_final = worldb_df_final.rename(columns={
    'EG.EGY.PRIM.PP.KD': 'Energy intensity level of primary energy (MJ/$2017 PPP GDP)',
    'EG.ELC.ACCS.RU.ZS': 'Access to electricity, rural (% of rural population)',
    'EG.ELC.ACCS.UR.ZS': 'Access to electricity, urban (% of urban population)',
    'EG.ELC.ACCS.ZS': 'Access to electricity (% of population)',
    'EG.ELC.COAL.ZS': 'Electricity production from coal sources (% of total)',
    'EG.ELC.FOSL.ZS': 'Electricity production from oil, gas and coal sources (% of total)',
    'EG.ELC.HYRO.ZS': 'Electricity production from hydroelectric sources (% of total)',
    'EG.ELC.LOSS.ZS': 'Electric power transmission and distribution losses (% of output)',
    'EG.ELC.NGAS.ZS': 'Electricity production from natural gas sources (% of total)',
    'EG.ELC.NUCL.ZS': 'Electricity production from nuclear sources (% of total)',
    'EG.ELC.PETR.ZS': 'Electricity production from oil sources (% of total)',
    'EG.ELC.RNEW.ZS': 'Renewable electricity output (% of total electricity output)',
    'EG.ELC.RNWX.KH': 'Electricity production from renewable sources, excluding hydroelectric (kWh)',
    'EG.ELC.RNWX.ZS': 'Electricity production from renewable sources, excluding hydroelectric (% of total)',
    'EG.FEC.RNEW.ZS': 'Renewable energy consumption (% of total final energy consumption)',
    'EG.GDP.PUSE.KO.PP': 'GDP per unit of energy use (PPP $ per kg of oil equivalent)',
    'EG.GDP.PUSE.KO.PP.KD': 'GDP per unit of energy use (constant 2021 PPP $ per kg of oil equivalent)',
    'EG.IMP.CONS.ZS': 'Energy imports, net (% of energy use)',
    'EG.USE.COMM.CL.ZS': 'Alternative and nuclear energy (% of total energy use)',
    'EG.USE.COMM.FO.ZS': 'Fossil fuel energy consumption (% of total)',
    'EG.USE.COMM.GD.PP.KD': 'Energy use (kg of oil equivalent) per $1,000 GDP (constant 2021 PPP)',
    'EG.USE.CRNW.ZS': 'Combustible renewables and waste (% of total energy)',
    'EG.USE.ELEC.KH.PC': 'Electric power consumption (kWh per capita)',
    'EG.USE.PCAP.KG.OE': 'Energy use (kg of oil equivalent per capita)',
    'DT.NFL.UNEP.CD': 'Net official flows from UN agencies, UNEP (current US$)',
    'NY.ADJ.DCO2.CD': 'Adjusted savings: carbon dioxide damage (current US$)',
    'NY.ADJ.DCO2.GN.ZS': 'Adjusted savings: carbon dioxide damage (% of GNI)',
    'NY.ADJ.DPEM.CD': 'Adjusted savings: particulate emission damage (current US$)',
    'NY.ADJ.DPEM.GN.ZS': 'Adjusted savings: particulate emission damage (% of GNI)',
    'NY.GDP.MKTP.CD': 'GDP (current US$)',
    'NY.GDP.MKTP.CN': 'GDP (current LCU)',
    'NY.GDP.MKTP.KD.ZG': 'GDP growth (annual %)',
    'SP.POP.TOTL': 'Population, total',
    'EN.CLC.DRSK.XQ': 'Disaster risk reduction progress score (1-5 scale; 5=best)',
    'EN.CLC.MDAT.ZS': 'Droughts, floods, extreme temperatures (% of population, average 1990-2009)',
    'EN.GHG.ALL.LU.MT.CE.AR5': 'Total greenhouse gas emissions including LULUCF (Mt CO2e)',
    'EN.GHG.ALL.MT.CE.AR5': 'Total greenhouse gas emissions excluding LULUCF (Mt CO2e)',
    'EN.GHG.ALL.PC.CE.AR5': 'Total greenhouse gas emissions excluding LULUCF per capita (t CO2e/capita)',
    'EN.GHG.CH4.AG.MT.CE.AR5': 'Methane (CH4) emissions from Agriculture (Mt CO2e)',
    'EN.GHG.CO2.AG.MT.CE.AR5': 'Carbon dioxide (CO2) emissions from Agriculture (Mt CO2e)',
    'EN.GHG.CO2.BU.MT.CE.AR5': 'Carbon dioxide (CO2) emissions from Building (Energy) (Mt CO2e)',
    'EN.GHG.CO2.FE.MT.CE.AR5': 'Carbon dioxide (CO2) emissions from Fugitive Emissions (Energy) (Mt CO2e)',
    'EN.GHG.CO2.IC.MT.CE.AR5': 'Carbon dioxide (CO2) emissions from Industrial Combustion (Energy) (Mt CO2e)',
    'EN.GHG.CO2.IP.MT.CE.AR5': 'Carbon dioxide (CO2) emissions from Industrial Processes (Mt CO2e)',
    'EN.GHG.CO2.LU.DF.MT.CE.AR5': 'Carbon dioxide (CO2) net fluxes from LULUCF - Deforestation (Mt CO2e)',
    'EN.GHG.CO2.LU.FL.MT.CE.AR5': 'Carbon dioxide (CO2) net fluxes from LULUCF - Forest Land (Mt CO2e)',
    'EN.GHG.CO2.LU.MT.CE.AR5': 'Carbon dioxide (CO2) net fluxes from LULUCF - Total excluding non-tropical fires (Mt CO2e)',
    'EN.GHG.CO2.LU.OL.MT.CE.AR5': 'Carbon dioxide (CO2) net fluxes from LULUCF - Other Land (Mt CO2e)',
    'EN.GHG.CO2.LU.OS.MT.CE.AR5': 'Carbon dioxide (CO2) net fluxes from LULUCF - Organic Soil (Mt CO2e)',
    'EN.GHG.CO2.MT.CE.AR5': 'Carbon dioxide (CO2) emissions (total) excluding LULUCF (Mt CO2e)',
    'EN.GHG.CO2.PC.CE.AR5': 'Carbon dioxide (CO2) emissions excluding LULUCF per capita (t CO2e/capita)',
    'EN.GHG.CO2.PI.MT.CE.AR5': 'Carbon dioxide (CO2) emissions from Power Industry (Energy) (Mt CO2e)',
    'EN.GHG.CO2.RT.GDP.KD': 'Carbon intensity of GDP (kg CO2e per constant 2015 US$ of GDP)',
    'EN.GHG.CO2.RT.GDP.PP.KD': 'Carbon intensity of GDP (kg CO2e per 2021 PPP $ of GDP)',
    'EN.GHG.CO2.TR.MT.CE.AR5': 'Carbon dioxide (CO2) emissions from Transport (Energy) (Mt CO2e)',
    'EN.GHG.CO2.WA.MT.CE.AR5': 'Carbon dioxide (CO2) emissions from Waste (Mt CO2e)',
    'EN.GHG.CO2.ZG.AR5': 'Carbon dioxide (CO2) emissions (total) excluding LULUCF (% change from 1990)',
    'EN.GHG.FGAS.IP.MT.CE.AR5': 'F-gases emissions from Industrial Processes (Mt CO2e)',
    'EN.GHG.TOT.ZG.AR5': 'Total greenhouse gas emissions excluding LULUCF (% change from 1990)'
})

column_names = worldb_df_final.columns.tolist()
print(column_names)

#See the result
worldb_df_final.head(50)

#See the results
environment_imf_df.head(50)

#Print the column names to see which ones to drop
column_names_imf = environment_imf_df.columns.tolist()
print(column_names_imf)

#Drop the unnecessary columns and check for null values
environment_imf_df = environment_imf_df.drop(['ObjectId', 'ISO2', 'CTS Code', 'CTS Name', 'CTS Full Descriptor', 'Source','1995', '1996', '1997', '1998', '1999','2020', '2021'], axis=1)
environment_imf_df.head(50)
environment_imf_df.isna().sum()

#See the shape of the dataframe as a reference for later
environment_imf_df.shape

#Pivot the columns displaying years to a column displaying the year and pivot the indicator column the other way around
melted_df = pd.melt(
    environment_imf_df,
    id_vars=['Country', 'ISO3', 'Indicator',
            'Unit'],
    var_name='Year',
    value_name='Value'
)

melted_df['Year'] = melted_df['Year'].astype(int)

pivoted_df = melted_df.pivot_table(
    index=['Country', 'ISO3',
          'Unit', 'Year'],
    columns='Indicator',
    values='Value'
).reset_index()

pivoted_df.head(50)

#Create a seperate dataframe for the data displayed in its domestic currency
environment_imf_domcur = pivoted_df[pivoted_df['Unit'] == 'Domestic Currency']
environment_imf_domcur.drop('Unit', axis=1, inplace=True)
environment_imf_domcur.head(50)

#Check for null values
environment_imf_domcur.isna().sum()

#Drop all rows that have null values and show the shape as a reference to the original
environment_imf_domcur = environment_imf_domcur.dropna(how='any')
environment_imf_domcur.shape

#Create a seperate dataframe for the data displayed in as a percentage of the GDP
environment_imf_gdp = pivoted_df[pivoted_df['Unit'] == 'Percent of GDP']
environment_imf_gdp = environment_imf_gdp.drop('Unit', axis=1)
#add a suffix to the column names
cols_to_rename = ['Environmental Taxes', 'Taxes on Energy (including fuel for transport)', 'Taxes on Pollution', 'Taxes on Resources', 'Taxes on Transport (excluding fuel for transport)']
environment_imf_gdp.columns = [str(col) + ' (Percent of GDP)' if col in cols_to_rename else col for col in environment_imf_gdp.columns]

environment_imf_gdp.head(50)

#Check for null values
environment_imf_gdp.isna().sum()

#Drop any rows with null values and show the shape as a reference
environment_imf_gdp = environment_imf_gdp.dropna(how='any')
environment_imf_gdp.shape

#Check for the null values
environment_imf_gdp.isna().sum()

#Check for null values in the Worldbank dataframe
worldb_df_final.isna().sum()

#Drop all unnecessary columns and columns with a lot of null values
worldb_df_final = worldb_df_final.drop([
    'Energy intensity level of primary energy (MJ/$2017 PPP GDP)',
    'Access to electricity, rural (% of rural population)',
    'Access to electricity, urban (% of urban population)',
    'Access to electricity (% of population)',
    'Electric power transmission and distribution losses (% of output)',
    'GDP per unit of energy use (PPP $ per kg of oil equivalent)',
    'GDP per unit of energy use (constant 2021 PPP $ per kg of oil equivalent)',
    'Energy imports, net (% of energy use)',
    'Energy use (kg of oil equivalent) per $1,000 GDP (constant 2021 PPP)',
    'Combustible renewables and waste (% of total energy)',
    'Electric power consumption (kWh per capita)',
    'Energy use (kg of oil equivalent per capita)',
    'Methane (CH4) emissions from Agriculture (Mt CO2e)',
    'Carbon dioxide (CO2) emissions from Agriculture (Mt CO2e)',
    'Carbon dioxide (CO2) emissions from Building (Energy) (Mt CO2e)',
    'Carbon dioxide (CO2) emissions from Fugitive Emissions (Energy) (Mt CO2e)',
    'Carbon dioxide (CO2) emissions from Industrial Combustion (Energy) (Mt CO2e)',
    'Carbon dioxide (CO2) emissions from Industrial Processes (Mt CO2e)',
    'Carbon dioxide (CO2) net fluxes from LULUCF - Deforestation (Mt CO2e)',
    'Carbon dioxide (CO2) net fluxes from LULUCF - Forest Land (Mt CO2e)',
    'Carbon dioxide (CO2) net fluxes from LULUCF - Total excluding non-tropical fires (Mt CO2e)',
    'Carbon dioxide (CO2) net fluxes from LULUCF - Other Land (Mt CO2e)',
    'Carbon dioxide (CO2) net fluxes from LULUCF - Organic Soil (Mt CO2e)',
    'Carbon dioxide (CO2) emissions excluding LULUCF per capita (t CO2e/capita)',
    'Carbon dioxide (CO2) emissions from Power Industry (Energy) (Mt CO2e)',
    'Carbon intensity of GDP (kg CO2e per 2021 PPP $ of GDP)',
    'Carbon dioxide (CO2) emissions from Transport (Energy) (Mt CO2e)',
    'Carbon dioxide (CO2) emissions from Waste (Mt CO2e)',
    'F-gases emissions from Industrial Processes (Mt CO2e)',
    'Net official flows from UN agencies, UNEP (current US$)',
    'Disaster risk reduction progress score (1-5 scale; 5=best)',
    'Droughts, floods, extreme temperatures (% of population, average 1990-2009)',
    'Unnamed: 0',
    'Unnamed: 0_y',
    'Alternative and nuclear energy (% of total energy use)',
    'Fossil fuel energy consumption (% of total)'
], axis=1)

#Check for null values afterwards
worldb_df_final.isna().sum()

#Drop any rows with missing values
worldb_df_final = worldb_df_final.dropna(how='any')

#Show the shape as a reference
worldb_df_final.shape

#Display the top rows as a check
worldb_df_final.head(50)

#No null values are shown
worldb_df_final.isna().sum()

#Create a new column called year out of the id column to make filtering easier
worldb_df_final['Year'] = worldb_df_final['economy_Time'].str[-4:].astype(int)


cols = worldb_df_final.columns.tolist()
cols.remove('economy_Time')
cols.remove('Country')
cols.remove('Year')

#Reorder the columns
cols.insert(0, 'economy_Time')
cols.insert(1, 'Country')
cols.insert(2, 'Year')

worldb_df_final = worldb_df_final[cols]

display(worldb_df_final.head())

#Show the result
worldb_df_final.head(15)

CPI_Global_Climate_Finance_df.head(50)

#Make sure that there are no sneaky 'Unknown' values which are not shown in the null value test
CPI_Global_Climate_Finance_df  = CPI_Global_Climate_Finance_df .fillna(np.nan)
CPI_Global_Climate_Finance_df = CPI_Global_Climate_Finance_df.astype(str)
problem_values = ['Unknown']
CPI_Global_Climate_Finance_df = CPI_Global_Climate_Finance_df.replace(problem_values, np.nan)
CPI_Global_Climate_Finance_df['Value']  = CPI_Global_Climate_Finance_df['Value'].astype(float)
CPI_Global_Climate_Finance_df['SIDs_Destination'] = CPI_Global_Climate_Finance_df['SIDs_Destination'].astype(bool)

#Drop any rows with null values
CPI_Global_Climate_Finance_df = CPI_Global_Climate_Finance_df.dropna(how='any')

#Check for null values
CPI_Global_Climate_Finance_df.isna().sum()

#As a reference check the shape
CPI_Global_Climate_Finance_df.shape

"""## 05 - Compute relevant statistics

Get together as a group and ask yourselves: what questions would you like to answer?

Compute descriptive statistics that inform you about the future and enable you to answer these questions.

Reminder: this should help you to achieve your end goal.

What was the situation in the year 2000, as many big corporates use this year as the base year for their climate ambitions?
"""

worldb_df_final[worldb_df_final['Year'] == 2000].describe()

"""What are the top emitting countries over time according to the Worldbank?"""

top10_countries = worldb_df_final.groupby('Country')['Total greenhouse gas emissions including LULUCF (Mt CO2e)'].sum().sort_values(ascending=False).head(10).index.tolist()

top10_ghg_df = worldb_df_final[worldb_df_final['Country'].isin(top10_countries)]

sns.lineplot(data=top10_ghg_df, x='Year', y='Total greenhouse gas emissions including LULUCF (Mt CO2e)', hue='Country')
plt.title('Total Greenhouse Gas Emissions for Top 10 Countries Over Time')
plt.xlabel('Year')
plt.ylabel('Total greenhouse gas emissions including LULUCF (Mt CO2e)')
plt.show()

"""How has the United States performed with regards to historical World Bank data?"""

worldb_df_final[worldb_df_final['Country'] == 'United States'].describe()

"""What happened in the year 2010, as many countries started to implement fiscal environmental policy during that time?"""

environment_imf_gdp[environment_imf_gdp['Year'] == 2010].describe()

"""Which countries collect the most on environmental tax with regards to their GDP?"""

top10_envtax_countries = environment_imf_gdp.groupby('Country')['Environmental Taxes (Percent of GDP)'].sum().sort_values(ascending=False).head(10).index.tolist()

top10_envtax_df = environment_imf_gdp[environment_imf_gdp['Country'].isin(top10_envtax_countries)]

sns.lineplot(data=top10_envtax_df, x='Year', y='Environmental Taxes (Percent of GDP)', hue='Country')
plt.title('Top 10 countries earning by environmental tax as percentage of their GDP')
plt.xlabel('Year')
plt.ylabel('Environmental Taxes (Percent of GDP)')
plt.show()

"""How much money is spend from private sources on climate change?"""

CPI_Global_Climate_Finance_df[CPI_Global_Climate_Finance_df['Institution_Type_Layer1'] == 'Private'].describe()

"""What are interesting starting points when it comes to funds spend on mitigation goals?"""

CPI_Global_Climate_Finance_df[CPI_Global_Climate_Finance_df['Use'] == 'Mitigation'].describe()

"""Which regions spend the most on climate adaptation?"""

sns.barplot(data=CPI_Global_Climate_Finance_df[CPI_Global_Climate_Finance_df['Use'] == 'Adaptation'], x='Region_Destination', y='Value')
plt.xticks(rotation=90)
plt.title('Spend on climate change adaptation per region')
plt.xlabel('Region')
plt.ylabel('Spend on climate change adaptation ends (in Billion $)')
plt.show()